const { Router } = require('express')
const validate = require('express-validation')
const validationRules = require('../validation/###resourcePlural###')

module.exports = (###resourceSingular###Repository) => {
  const app = new Router()

  /**
   * List all resources
   * @swagger
   * /api/###resourceSlug###:
   *   get:
   *     tags:
   *       - ###ResourcePlural###
   *     name: List ###resourcePlural###
   *     summary: Lists all the ###resourcePlural###
   *     security:
   *       - bearerAuth: []
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     responses:
   *       200:
   *         description: An array of ###resourceSingular### objects
   *       401:
   *         description: Not authorized to access this resource
   *       422:
   *         description: Unprocessable entity
   *       500:
   *         description: Internal Server Error
   */
  app.get('/', async (req, res, next) => {
    try {
      const ###resourcePlural### = await ###resourceSingular###Repository.list()
      return res.status(200).json(###resourcePlural###)
    } catch (err) {
      next(err)
    }
  })

  /**
   * Create a new resource
   * @swagger
   * /api/###resourceSlug###:
   *   post:
   *     tags:
   *       - ###ResourcePlural###
   *     name: Create ###resourceSingular###
   *     summary: Creates a new ###resourceSingular###
   *     security:
   *       - bearerAuth: []
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: body
   *         in: body
   *         schema:
   *           type: object
   *           properties:
###ResourceProperties###
   *         required:
###RequiredResourceProperties###
   *     responses:
   *       200:
   *         description: A ###resourceSingular### object
   *       401:
   *         description: Not authorized to access this resource
   *       422:
   *         description: Unprocessable entity
   *       500:
   *         description: Internal Server Error
   */
  app.post('/', validate(validationRules.store), async (req, res, next) => {
    try {
      const results = await ###resourceSingular###Repository.store(req.body)
      return res.status(201).json({ id: results.insertId })
    } catch (err) {
      next(err)
    }
  })

  /**
   * Partially update resources matching criteria
   * @swagger
   * /api/###resourceSlug###:
   *   patch:
   *     tags:
   *       - ###ResourcePlural###
   *     name: Partially update ###resourcePlural### matching criteria
   *     summary: Partially updates all existing ###resourcePlural### matching criteria
   *     security:
   *       - bearerAuth: []
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: body
   *         in: body
   *         schema:
   *           type: object
   *           properties:
   *             criteria:
   *               type: array
   *               items:
   *                 type: object
   *                 properties:
   *                   field:
   *                     type: string
   *                   op:
   *                     type: string
   *                   value:
   *                     type: string
   *             set:
   *               type: object
   *         required:
   *           - criteria
   *           - set
   *     responses:
   *       204:
   *         description: No content
   *       401:
   *         description: Not authorized to access this resource
   *       422:
   *         description: Unprocessable entity
   *       500:
   *         description: Internal Server Error
   */
  app.patch('/', validate(validationRules.bulkUpdate), async (req, res, next) => {
    try {
      const result = await ###resourceSingular###Repository.bulkUpdate(req.body)
      if (result.affectedRows > 0) {
        return res.sendStatus(204)
      }
      return res.sendStatus(404)
    } catch (err) {
      next(err)
    }
  })

  /**
   * Show an existing resource
   * @swagger
   * /api/###resourceSlug###/{id}:
   *   get:
   *     tags:
   *       - ###ResourcePlural###
   *     name: Show ###resourceSingular###
   *     summary: Shows an existing ###resourceSingular###
   *     security:
   *       - bearerAuth: []
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         in: path
   *         schema:
   *           type: string
   *         required:
   *           - id
   *     responses:
   *       200:
   *         description: A ###resourceSingular### object
   *       401:
   *         description: Not authorized to access this resource
   *       404:
   *         description: Not found
   *       422:
   *         description: Unprocessable entity
   *       500:
   *         description: Internal Server Error
   */
  app.get('/:id', async (req, res, next) => {
    try {
      const result = await ###resourceSingular###Repository.getById(req.params.id)
      if (result.length > 0) {
        return res.status(200).json(result[0])
      }
      return res.sendStatus(404)
    } catch (err) {
      next(err)
    }
  })

  /**
   * Update an existing resource
   * @swagger
   * /api/###resourceSlug###/{id}:
   *   put:
   *     tags:
   *       - ###ResourcePlural###
   *     name: Update ###resourceSingular###
   *     summary: Updates an existing ###resourceSingular###
   *     security:
   *       - bearerAuth: []
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: body
   *         in: body
   *         schema:
   *           type: object
   *           properties:
###ResourceProperties###
   *         required:
###AllRequiredResourceProperties###
   *       - name: id
   *         in: path
   *         schema:
   *           type: string
   *         required:
   *           - id
   *     responses:
   *       204:
   *         description: No content
   *       401:
   *         description: Not authorized to access this resource
   *       404:
   *         description: Not found
   *       422:
   *         description: Unprocessable entity
   *       500:
   *         description: Internal Server Error
   */
  app.put('/:id', validate(validationRules.update), async (req, res, next) => {
    try {
      const result = await ###resourceSingular###Repository.update(req.params.id, req.body)
      if (result.affectedRows === 1) {
        return res.sendStatus(204)
      }
      return res.sendStatus(404)
    } catch (err) {
      next(err)
    }
  })

  /**
   * Partially update an existing resource
   * @swagger
   * /api/###resourceSlug###/{id}:
   *   patch:
   *     tags:
   *       - ###ResourcePlural###
   *     name: Partially update ###resourceSingular###
   *     summary: Partially updates an existing ###resourceSingular###
   *     security:
   *       - bearerAuth: []
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: body
   *         in: body
   *         schema:
   *           type: object
   *           properties:
###ResourceProperties###
   *       - name: id
   *         in: path
   *         schema:
   *           type: string
   *         required:
   *           - id
   *     responses:
   *       204:
   *         description: No content
   *       401:
   *         description: Not authorized to access this resource
   *       404:
   *         description: Not found
   *       422:
   *         description: Unprocessable entity
   *       500:
   *         description: Internal Server Error
   */
  app.patch('/:id', validate(validationRules.partialUpdate), async (req, res, next) => {
    try {
      const result = await ###resourceSingular###Repository.update(req.params.id, req.body)
      if (result.affectedRows === 1) {
        return res.sendStatus(204)
      }
      return res.sendStatus(404)
    } catch (err) {
      next(err)
    }
  })

  /**
   * Destroy an existing resource
   * @swagger
   * /api/###resourceSlug###/{id}:
   *   delete:
   *     tags:
   *       - ###ResourcePlural###
   *     name: Delete ###resourceSingular###
   *     summary: Deletes an existing ###resourceSingular###
   *     security:
   *       - bearerAuth: []
   *     consumes:
   *       - application/json
   *     produces:
   *       - application/json
   *     parameters:
   *       - name: id
   *         in: path
   *         schema:
   *           type: string
   *         required:
   *           - id
   *     responses:
   *       204:
   *         description: No content
   *       401:
   *         description: Not authorized to access this resource
   *       404:
   *         description: Not found
   *       500:
   *         description: Internal Server Error
   */
  app.delete('/:id', async (req, res, next) => {
    try {
      const result = await ###resourceSingular###Repository.destroy(req.params.id)
      if (result.affectedRows === 1) {
        return res.sendStatus(204)
      }
      return res.sendStatus(404)
    } catch (err) {
      next(err)
    }
  })

  return app
}